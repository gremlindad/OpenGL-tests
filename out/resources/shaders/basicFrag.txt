#version 330 core

out vec4 FragColor;

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;





struct Material
{
	sampler2D diffuseMap;
	sampler2D specularMap;

	float shininess; //what power to raise it to
};

struct Light
{
	vec3 position;
	//vec3 orientation;
	
	//scale
	vec3 ambient;	
	vec3 diffuse;
	vec3 specular;

	//attenuation
	float quad;	
	float lin;
	float con;

};


uniform vec3 camPos;
uniform Material mat;
uniform Light light;


vec3 calcLight(vec3 camPos,Light lite,vec3 fragPos,vec3 norm);
vec3 calcFog(vec3 fragPos, vec3 fogColor,vec3 calcedColor);
float linearDepth(float nlDepth, float n, float f);


void main()
{
	
	FragColor = vec4(1.0f);
}


vec3 calcLight(vec3 camPos,Light lite,vec3 fragPos,vec3 norm)
{
	vec3 lightDir = normalize(lite.position-fragPos);
	vec3 viewDir = normalize(camPos-fragPos);
	vec3 normal = normalize(norm);

	//attenuation
	float dist = length(fragPos-lite.position);
	float atten = 1.0f/((dist*dist*lite.quad)+(dist*lite.lin)+(lite.con));


	//ambient
	vec3 ambient = atten* lite.ambient * texture(mat.diffuseMap,TexCoords).rgb;
	
	//diffuse
	//the diffuse is calculated by taking the dot product of the normal 
	//and the angle of the fragment from the light
	
	float diffAmt = max(dot(lightDir,normal),0.0f);
	vec3 diffuse = atten* diffAmt * lite.diffuse * texture(mat.diffuseMap,TexCoords).rgb;

	//specular
	//spec is calculated by angle of the viewer and the mirror of the light 
	//vec around the normal, reflect() expects the vectore to be coming
	//from the light
	float specAmt = pow(max(dot(reflect(-lightDir,normal),viewDir),0.0f)
	,mat.shininess);
	vec3 specular = atten* specAmt * lite.specular * texture(mat.diffuseMap,TexCoords).rgb;
	
	return (ambient + diffuse + specular);
	
}

vec3 calcFog(vec3 fragPos, vec3 fogColor,vec3 calcedColor)
{
	float ld = linearDepth(gl_FragCoord.z,0.1f,100.0f);
	return mix(calcedColor,fogColor,ld); //how much of the fog color 
}


float linearDepth(float nlDepth, float n, float f)
{
	float ndc = 2.0f*nlDepth - 1.0f;
	float linear = 2*f*n/((f+n)-ndc*(f-n));
	float linearNormalized = (linear-n)/(f-n);

	return linearNormalized;
} 